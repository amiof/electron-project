name: Build and Release aria2

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y autoconf automake autotools-dev \
            build-essential pkg-config libtool \
            libssl-dev libcppunit-dev libxml2-dev zlib1g-dev \
            libsqlite3-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install autoconf automake libtool gettext \
            openssl cppunit libxml2 zlib sqlite3
          brew link --force --overwrite libtool
          brew link --force --overwrite gettext
          echo 'export PATH="/usr/local/opt/libtool/libexec/gnubin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/libtool/libexec/gnubin:$PATH"' >> ~/.zshrc
          echo 'export PATH="/usr/local/opt/gettext/bin:$PATH"' >> ~/.bash_profile
          echo 'export PATH="/usr/local/opt/gettext/bin:$PATH"' >> ~/.zshrc
          source ~/.bash_profile || true
          source ~/.zshrc || true

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y mingw make
          echo "C:\Program Files\Git\usr\bin" >> $GITHUB_PATH

      - name: Clone aria2
        run: git clone https://github.com/aria2/aria2.git --depth=1

      - name: Build aria2 (Linux)
        if: runner.os == 'Linux'
        run: |
          cd aria2
          autoreconf -i
          ./configure --enable-static --disable-shared
          make -j$(nproc)

      - name: Build aria2 (macOS)
        if: runner.os == 'macOS'
        run: |
          cd aria2
          glibtoolize --force
          autoreconf -fiv
          ./configure --disable-nls --enable-static --disable-shared
          rm -rf po
          mkdir po
          echo -e 'all:\n\t@echo "Skipping po build."' > po/Makefile
          make -j$(sysctl -n hw.logicalcpu)

      - name: Build aria2 (Windows)
        if: runner.os == 'Windows'
        run: |
          cd aria2
          autoreconf -i
          ./configure --enable-static --disable-shared
          make -j$(echo $NUMBER_OF_PROCESSORS)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2-${{ runner.os }}
          path: aria2/src/aria2c*
